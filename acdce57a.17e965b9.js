(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{216:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return c})),n.d(r,"metadata",(function(){return s})),n.d(r,"toc",(function(){return i})),n.d(r,"default",(function(){return p}));var t=n(3),o=n(7),a=(n(0),n(307)),c={title:"sleepy_discord/server.cpp"},s={unversionedId:"reference/Files/server_8cpp",id:"reference/Files/server_8cpp",isDocsHomePage:!1,title:"sleepy_discord/server.cpp",description:"Namespaces",source:"@site/docs/reference/Files/server_8cpp.md",slug:"/reference/Files/server_8cpp",permalink:"/sleepy-discord/docs/reference/Files/server_8cpp",version:"current",sidebar:"Reference",previous:{title:"sleepy_discord/sd_error.cpp",permalink:"/sleepy-discord/docs/reference/Files/sd__error_8cpp"},next:{title:"include/sleepy_discord/server.h",permalink:"/sleepy-discord/docs/reference/Files/server_8h"}},i=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Source code",id:"source-code",children:[]}],l={toc:i};function p(e){var r=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(t.a)({},l,n,{components:r,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"namespaces"},"Namespaces"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},"Name"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(a.b)("h2",{id:"source-code"},"Source code"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},'#include "server.h"\n#include "client.h"\n#include "permissions.h"\n\nnamespace SleepyDiscord {\n    std::list<ServerMember>::iterator Server::findMember(Snowflake<User> userID) {\n        return userID.findObject(members.begin(), members.end());\n    }\n\n    std::list<Channel>::iterator Server::findChannel(Snowflake<Channel> channelID) {\n        return channelID.findObject(channels.begin(), channels.end());\n    }\n\n    std::list<Role>::iterator Server::findRole(Snowflake<Role> roleID) {\n        return roleID.findObject(roles.begin(), roles.end());\n    }\n\n    ServerMember::ServerMember(const json::Value & json) :\n        ServerMember(json::fromJSON<ServerMember>(json)) {\n        ID = user.ID;\n    }\n    ServerMember::ServerMember(const nonstd::string_view & json) :\n        ServerMember(json::fromJSON<ServerMember>(json)) {\n    }\n\n    Server::Server(const json::Value & json) :\n        Server(json::fromJSON<Server>(json)) {\n    }\n    Server::Server(const nonstd::string_view & json) :\n        Server(json::fromJSON<Server>(json)) {\n    }\n\n    UnavailableServer::UnavailableServer(const json::Value & json) :\n        UnavailableServer(json::fromJSON<UnavailableServer>(json)) {\n    }\n    UnavailableServer::UnavailableServer(const nonstd::string_view & json) :\n        UnavailableServer(json::fromJSON<UnavailableServer>(json)) {\n    }\n\n    ServerEmbed::ServerEmbed(const json::Value & json) :\n        ServerEmbed(json::fromJSON<ServerEmbed>(json)) {\n    }\n    ServerEmbed::ServerEmbed(const nonstd::string_view & json) :\n        ServerEmbed(json::fromJSON<ServerEmbed>(json)) {\n    }\n}\n')),Object(a.b)("hr",null),Object(a.b)("p",null,"Updated on 24 February 2021 at 15:10:04 UTC"))}p.isMDXComponent=!0},307:function(e,r,n){"use strict";n.d(r,"a",(function(){return d})),n.d(r,"b",(function(){return m}));var t=n(0),o=n.n(t);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function c(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?c(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),p=function(e){var r=o.a.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},d=function(e){var r=p(e.components);return o.a.createElement(l.Provider,{value:r},e.children)},b={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},u=o.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(n),u=t,m=d["".concat(c,".").concat(u)]||d[u]||b[u]||a;return n?o.a.createElement(m,s(s({ref:r},l),{},{components:n})):o.a.createElement(m,s({ref:r},l))}));function m(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var a=n.length,c=new Array(a);c[0]=u;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s.mdxType="string"==typeof e?e:t,c[1]=s;for(var l=2;l<a;l++)c[l]=n[l];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);