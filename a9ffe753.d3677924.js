(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{222:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),s=(n(0),n(320)),i={title:"include/sleepy_discord/zlib-ng_compression.h"},c={unversionedId:"reference/Files/zlib-ng__compression_8h",id:"reference/Files/zlib-ng__compression_8h",isDocsHomePage:!1,title:"include/sleepy_discord/zlib-ng_compression.h",description:"Namespaces",source:"@site/docs/reference/Files/zlib-ng__compression_8h.md",slug:"/reference/Files/zlib-ng__compression_8h",permalink:"/sleepy-discord/docs/reference/Files/zlib-ng__compression_8h",version:"current",sidebar:"Reference",previous:{title:"include/sleepy_discord/websocketpp_websocket.h",permalink:"/sleepy-discord/docs/reference/Files/websocketpp__websocket_8h"},next:{title:"SleepyDiscord",permalink:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"}},o=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Classes",id:"classes",children:[]},{value:"Types",id:"types",children:[]},{value:"Defines",id:"defines",children:[]},{value:"Types Documentation",id:"types-documentation",children:[{value:"using DefaultCompression",id:"using-defaultcompression",children:[]}]},{value:"Macro Documentation",id:"macro-documentation",children:[{value:"define SLEEPY_DEFAULT_COMPRESSION",id:"define-sleepy_default_compression",children:[]}]},{value:"Source code",id:"source-code",children:[]}],l={toc:o};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"namespaces"},"Namespaces"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(s.b)("h2",{id:"classes"},"Classes"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null}),Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"class"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_z_lib_compression"},"SleepyDiscord::ZLibCompression")))))),Object(s.b)("h2",{id:"types"},"Types"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null}),Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"using ZLibCompression"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Files/zlib-ng__compression_8h#using-defaultcompression"},"DefaultCompression")))))),Object(s.b)("h2",{id:"defines"},"Defines"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null}),Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null}),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Files/zlib-ng__compression_8h#define-sleepy_default_compression"},"SLEEPY_DEFAULT_COMPRESSION")))))),Object(s.b)("h2",{id:"types-documentation"},"Types Documentation"),Object(s.b)("h3",{id:"using-defaultcompression"},"using DefaultCompression"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::DefaultCompression = typedef ZLibCompression;\n")),Object(s.b)("h2",{id:"macro-documentation"},"Macro Documentation"),Object(s.b)("h3",{id:"define-sleepy_default_compression"},"define SLEEPY_DEFAULT_COMPRESSION"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"#define SLEEPY_DEFAULT_COMPRESSION ZLibCompression\n")),Object(s.b)("h2",{id:"source-code"},"Source code"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include "generic_compression.h"\n#include "zlib-ng/zlib-ng.h"\n#include <array>\n#include <queue>\n\nnamespace SleepyDiscord {\n    class ZLibCompression : public GenericCompression {\n    public:\n        bool uncompress(const std::string& compressed, std::string& uncompressedOut) override {\n            auto stream = zng_stream{};\n            memset(&stream, 0, sizeof(stream));\n            int output = zng_inflateInit(&stream);\n            if (output != Z_OK) {\n                zng_inflateEnd(&stream);\n                return false;\n            }\n\n            stream.next_in = reinterpret_cast<const uint8_t*>(compressed.data());\n            stream.avail_in = static_cast<uint32_t>(compressed.length());\n\n            constexpr size_t chunkSize = 16 * 1024;\n            using Data = std::array<char, chunkSize>;\n            using Buffer = std::pair<Data, std::size_t>;\n            std::list<Buffer> outputQueue;\n\n            bool makeNewBuffer = true;\n            std::size_t totalSize = 0;\n            output = Z_BUF_ERROR;\n            do {\n                if (makeNewBuffer == true) {\n                    outputQueue.emplace_back(); //make a new output buffer\n                    makeNewBuffer = false;\n                }\n                Buffer& buffer = outputQueue.back();\n                Data& data = buffer.first;\n                std::size_t size = buffer.second;\n\n                stream.next_out = reinterpret_cast<uint8_t*>(&data[size]);\n                stream.avail_out = static_cast<uint32_t>(data.max_size() - size);\n\n                output = zng_inflate(&stream, Z_SYNC_FLUSH);\n\n                auto oldSize = size;\n                size = data.max_size() - stream.avail_out;\n                buffer.second = size;\n                auto deltaSize = size - oldSize;\n                totalSize += deltaSize;\n\n                if (output == Z_STREAM_END) {\n                    output = zng_inflateEnd(&stream);\n                    break;\n                } else if (deltaSize == 0) {\n                    makeNewBuffer = true;\n                }\n            } while (output == Z_OK || output == Z_BUF_ERROR);\n            \n            uncompressedOut.clear();\n            uncompressedOut.reserve(totalSize);\n            for (; 0 < outputQueue.size(); outputQueue.pop_front()) {\n                Buffer& buffer = outputQueue.front();\n                Data& data = buffer.first;\n                std::size_t size = buffer.second;\n\n                uncompressedOut.append(data.data(), size);\n            }\n\n            return true;\n        }\n    };\n\n    using DefaultCompression = ZLibCompression;\n#define SLEEPY_DEFAULT_COMPRESSION ZLibCompression\n}\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Updated on 22 February 2021 at 17:44:22 UTC"))}u.isMDXComponent=!0},320:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,m=p["".concat(i,".").concat(d)]||p[d]||b[d]||s;return n?a.a.createElement(m,c(c({ref:t},l),{},{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<s;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);